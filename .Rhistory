panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
# C values range from about 0.5 to 2, start with 0.1
Cstart <- c(C=0.1)
# fit a non linear model using the arbitrary C value,
# N is the number of the genotypes that have the SNP site
modelC <- nls(rsq ~ ( (10+C*dist)/( (2+C*dist) * (11+C*dist) ) ) *
( 1+( (3+C*dist) * (12+12*C*dist+(C*dist)^2) ) / ( 2*N*(2+C*dist) * (11+C*dist) ) ),
data=file, start=Cstart, control=nls.control(maxiter=100))
# extract rho, the recombination parameter in 4Nr
rho <- summary(modelC)$parameters[1]
# feed in the new value of rho to obtain LD values adjusted for their distances along the chromosome/genome
newrsq <- ( (10+rho*file$dist) / ( (2+rho*file$dist) * (11+rho*file$dist) ) ) *
( 1 + ( (3+rho * file$dist) * (12+12*rho*file$dist + (rho*file$dist)^2) ) /
(2*file$N*(2+rho*file$dist) * (11+rho*file$dist) ) )
newfile <- data.frame(file$dist, newrsq)
maxld <- max(newfile$newrsq,na.rm=TRUE) #using max LD value from adjusted data
halfdecay = maxld*0.5
halfdecaydist <- newfile$file.dist[which.min(abs(newfile$newrsq-halfdecay))]
newfile <- newfile[order(newfile$file.dist),]
# plotting the values
pdf("LD_decay1.pdf", height=5, width = 5)
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 4, 0, 0))
plot(file$dist, file$rsq, pch=".", cex=2, xlab="Distance (bp)", ylab=expression(LD ~ (r^2)), col="grey")
lines(newfile$file.dist, newfile$newrsq, col="red", lwd=2)
abline(h=0.1, col="blue") # if you need to add horizental line
abline(v=halfdecaydist, col="green")
mtext(round(halfdecaydist,2), side=1, line=0.05, at=halfdecaydist, cex=0.75, col="green")
dev.off()
ld <- read.delim(file.choose(),stringsAsFactors = FALSE,header=TRUE, sep = "\t")
str(ld)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
#biining
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 1000)), labels = 1:9999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+06),breaks =seq(0, 5.0e+06,500000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.2,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+06),breaks =seq(0, 5.0e+06,500000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
#biining
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 10000)), labels = 1:999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.2,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+06),breaks =seq(0, 5.0e+06,500000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
#biining
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 100)), labels = 1:99999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.2,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+06),breaks =seq(0, 5.0e+06,500000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
# Ensure numeric columns
ld$R.2 <- as.numeric(ld$R.2)
ld$Dist_bp <- as.numeric(ld$Dist_bp)
# Remove NAs/NaNs
ld_sub <- ld[!is.na(ld$R.2) & !is.na(ld$Dist_bp), ]
ld_sub$rsq <- ld_sub$R.2
ld_sub$dist <- ld_sub$Dist_bp
library(tidyverse)
# Optional: filter by significant LD
ld_sig <- ld_sub %>% filter(pDiseq < 0.05)
# Binning: 1 kb bins up to 200 kb
ld_sig$bin <- cut(ld_sig$dist, breaks = seq(0, 200000, by = 1000), labels = FALSE, include.lowest = TRUE)
# Mean distance and r2 per bin
mean_dist <- aggregate(ld_sig$dist, list(ld_sig$bin), mean)
mean_r2 <- aggregate(ld_sig$rsq, list(ld_sig$bin), mean)
total <- merge(mean_dist, mean_r2, by = "Group.1")
colnames(total) <- c("bin", "mean_dist", "mean_r2")
# Plotting
library(ggplot2)
ggplot(total, aes(x = mean_dist, y = mean_r2)) +
geom_point(color = "grey") +
stat_smooth(method = "loess", color = "red", se = FALSE, span = 0.3) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000), expand = c(0,0)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1), expand = c(0,0)) +
theme(
panel.background = element_rect(fill = "white", colour = "white", size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "lightblue"),
panel.grid.minor = element_blank(),
axis.line = element_line(size = 0.5, linetype = "solid", colour = "black")
)
ld$R.2 <- as.numeric(ld$R.2)
ld$Dist_bp <- as.numeric(ld$Dist_bp)
# Keep only pairs within 200kb
ld <- ld[!is.na(ld$R.2) & !is.na(ld$Dist_bp) & ld$Dist_bp <= 200000, ]
ld <- ld[ld$pDiseq < 0.05, ]   # Optional: Filter by pDiseq
# Order by distance
ld <- ld[order(ld$Dist_bp), ]
# Rolling median/mean (e.g., window = 1000 points)
ld$rollmean_r2 <- zoo::rollmean(ld$R.2, k = 1000, fill = NA, align = "center") # Adjust window as needed
# Plot scatter and rolling mean
ggplot(ld, aes(x = Dist_bp, y = R.2)) +
geom_point(alpha = 0.15, color = "grey", size = 1) +
geom_line(aes(y = rollmean_r2), color = "red", size = 1.1, na.rm = TRUE) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_minimal() +
theme(axis.line = element_line(colour = "black"), panel.grid.minor = element_blank())
library(tidyverse)
library(zoo)
# 2. Clean: Keep valid, relevant distances and r2 values
ld$R.2 <- as.numeric(ld$R.2)
ld$Dist_bp <- as.numeric(ld$Dist_bp)
ld <- ld[!is.na(ld$R.2) & !is.na(ld$Dist_bp) & ld$Dist_bp <= 5000000, ]  # up to 5 Mb for broader context
# 3. (Optional) Filter by significant LD (if you prefer)
# ld <- ld[ld$pDiseq < 0.05, ]
# 4. Sort by distance
ld <- ld[order(ld$Dist_bp), ]
# 5. Calculate rolling mean/median
window_size <- 1000  # Adjust as needed: 500, 1000, 2000
ld$rollmean_r2 <- zoo::rollmean(ld$R.2, k = window_size, fill = NA, align = "center")
ld$rollmedian_r2 <- zoo::rollmedian(ld$R.2, k = window_size, fill = NA, align = "center")
# 6. Plot
ggplot(ld, aes(x = Dist_bp, y = R.2)) +
geom_point(alpha = 0.15, color = "grey", size = 1) +
geom_line(aes(y = rollmean_r2), color = "red", size = 1.2, na.rm = TRUE) +
# Or use median for more robustness:
# geom_line(aes(y = rollmedian_r2), color = "blue", size = 1.2, na.rm = TRUE) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 5000000), breaks = seq(0, 5000000, 500000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank()
)
#ggplot(ld, aes(x = Dist_bp, y = R.2)) +
geom_point(alpha = 0.15, color = "grey", size = 1) +
geom_line(aes(y = rollmean_r2), color = "red", size = 1.2, na.rm = TRUE) +
# Or use median:
# geom_line(aes(y = rollmedian_r2), color = "blue", size = 1.2, na.rm = TRUE) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank()
)
ggplot(ld, aes(x = Dist_bp, y = R.2)) +
geom_point(alpha = 0.15, color = "grey", size = 1) +
geom_line(aes(y = rollmean_r2), color = "red", size = 1.2, na.rm = TRUE) +
# Or use median:
# geom_line(aes(y = rollmedian_r2), color = "blue", size = 1.2, na.rm = TRUE) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank()
)
# 3. Clean data: keep valid values and within distance range
ld$R.2 <- as.numeric(ld$R.2)
ld$Dist_bp <- as.numeric(ld$Dist_bp)
ld <- ld[!is.na(ld$R.2) & !is.na(ld$Dist_bp) & ld$Dist_bp <= 200000, ]  # 0-200kb
# 4. (Optional) Filter by significant LD (uncomment if needed)
# ld <- ld[ld$pDiseq < 0.05, ]
# 5. Sort by distance
ld <- ld[order(ld$Dist_bp), ]
# 6. Rolling mean (blue curve) - adjust window size for smoothness
window_size <- 3000    # Try 2000, 3000, or higher for a smoother curve
ld$rollmean_r2 <- zoo::rollmean(ld$R.2, k = window_size, fill = NA, align = "center")
# 7. Plot: scatter, rolling mean (blue), and LOESS smooth (red)
ggplot(ld, aes(x = Dist_bp, y = R.2)) +
geom_point(alpha = 0.15, color = "grey", size = 1) +
geom_line(aes(y = rollmean_r2), color = "blue", size = 1.2, na.rm = TRUE) +
stat_smooth(method = "loess", color = "red", se = FALSE, span = 0.3, size = 1.3) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank()
)
ld$R.2 <- as.numeric(ld$R.2)
ld$Dist_bp <- as.numeric(ld$Dist_bp)
ld <- ld[!is.na(ld$R.2) & !is.na(ld$Dist_bp) & ld$Dist_bp <= 200000, ]
# 2. Assign quantile bins (1000 bins)
ld <- ld %>% arrange(Dist_bp)
ld$bin <- ntile(ld$Dist_bp, 1000)
# 3. Calculate mean distance and R² per bin
ld_binned <- ld %>%
group_by(bin) %>%
summarize(
mean_dist = mean(Dist_bp),
mean_r2 = mean(R.2)
)
# 4. Plot (just 1000 points, plus LOESS smooth)
ggplot(ld_binned, aes(x = mean_dist, y = mean_r2)) +
geom_point(color = "grey30", size = 1) +
stat_smooth(method = "loess", color = "red", se = FALSE, span = 0.3, size = 1.3) +
scale_x_continuous(name = "Distance (bp)", limits = c(0, 200000), breaks = seq(0, 200000, 20000)) +
scale_y_continuous(name = expression(R^2), limits = c(0, 0.8), breaks = seq(0, 0.8, 0.1)) +
theme_classic() +
theme(
axis.line = element_line(colour = "black"),
panel.grid.minor = element_blank()
)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
# C values range from about 0.5 to 2, start with 0.1
Cstart <- c(C=0.1)
# fit a non linear model using the arbitrary C value,
# N is the number of the genotypes that have the SNP site
modelC <- nls(rsq ~ ( (10+C*dist)/( (2+C*dist) * (11+C*dist) ) ) *
( 1+( (3+C*dist) * (12+12*C*dist+(C*dist)^2) ) / ( 2*N*(2+C*dist) * (11+C*dist) ) ),
data=file, start=Cstart, control=nls.control(maxiter=100))
# import TASSEL LD output file
ld <- read.delim(file.choose(),stringsAsFactors = FALSE,header=TRUE, sep = "\t")
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
# C values range from about 0.5 to 2, start with 0.1
Cstart <- c(C=0.1)
# fit a non linear model using the arbitrary C value,
# N is the number of the genotypes that have the SNP site
modelC <- nls(rsq ~ ( (10+C*dist)/( (2+C*dist) * (11+C*dist) ) ) *
( 1+( (3+C*dist) * (12+12*C*dist+(C*dist)^2) ) / ( 2*N*(2+C*dist) * (11+C*dist) ) ),
data=file, start=Cstart, control=nls.control(maxiter=100))
# extract rho, the recombination parameter in 4Nr
rho <- summary(modelC)$parameters[1]
# feed in the new value of rho to obtain LD values adjusted for their distances along the chromosome/genome
newrsq <- ( (10+rho*file$dist) / ( (2+rho*file$dist) * (11+rho*file$dist) ) ) *
( 1 + ( (3+rho * file$dist) * (12+12*rho*file$dist + (rho*file$dist)^2) ) /
(2*file$N*(2+rho*file$dist) * (11+rho*file$dist) ) )
newfile <- data.frame(file$dist, newrsq)
maxld <- max(newfile$newrsq,na.rm=TRUE) #using max LD value from adjusted data
halfdecay = maxld*0.5
halfdecaydist <- newfile$file.dist[which.min(abs(newfile$newrsq-halfdecay))]
newfile <- newfile[order(newfile$file.dist),]
# plotting the values
pdf("LD_decay2.pdf", height=5, width = 5)
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 4, 0, 0))
plot(file$dist, file$rsq, pch=".", cex=2, xlab="Distance (bp)", ylab=expression(LD ~ (r^2)), col="grey")
lines(newfile$file.dist, newfile$newrsq, col="red", lwd=2)
abline(h=0.1, col="blue") # if you need to add horizental line
abline(v=halfdecaydist, col="green")
mtext(round(halfdecaydist,2), side=1, line=0.05, at=halfdecaydist, cex=0.75, col="green")
dev.off()
jpeg("LD_decay2.jpg", height=5, width=5, units="in", res=300)  # high-res, square figure
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 4, 0, 0))
plot(file$dist, file$rsq, pch=".", cex=2, xlab="Distance (bp)", ylab=expression(LD ~ (r^2)), col="grey")
lines(newfile$file.dist, newfile$newrsq, col="red", lwd=2)
abline(h=0.1, col="blue") # if you need to add horizental line
abline(v=halfdecaydist, col="green")
mtext(round(halfdecaydist,2), side=1, line=0.05, at=halfdecaydist, cex=0.75, col="green")
dev.off()
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
#biining
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 1000)), labels = 1:9999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 1000)), labels = 1:99999)
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 1000)), labels = 1:9999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
ld <- read.delim(file.choose(),stringsAsFactors = FALSE,header=TRUE, sep = "\t")
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
#biining
file$bin <- cut(file$dist, breaks = c(seq(from=1, to=10000000, by = 1000)), labels = 1:9999)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+06),breaks =seq(0, 5.0e+06,500000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
##remove sites that have NaN for distance or r2
ld_sub <- ld[ld$R.2 != "NaN",]
ld_sub$dist <- as.numeric(ld_sub$Dist_bp)
ld_sub2 <- ld_sub[ld_sub$dist != "N/A",]
ld_sub2$rsq <- ld_sub2$R.2
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
file$bin <- cut(
file$dist,
breaks = c(seq(from = 1, to = 100000000, by = 100)),   # 100 bp bins from 1 to 100,000,000 bp
labels = 1:999999                                      # One label per bin (1 to 999,999)
)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
file <- ld_sub2[,c(1,2,7,8,15:19)]
library(tidyverse)
file<-file %>% filter(pDiseq < 0.05)
# binning: 100 bp bins from 1 to 10,000,000 bp
file$bin <- cut(
file$dist,
breaks = c(seq(from = 1, to = 10000000, by = 100)),   # 100 bp bins up to 10 Mb
labels = 1:99999                                      # 99,999 bins total
)
#Mean of dist per bin
t1<-aggregate(file$dist, list(file$bin), FUN=mean)
#Mean of r2 per bin
g1<-aggregate(file$rsq, list(file$bin), FUN=mean)
total <- merge(t1, g1,by="Group.1")
#plotting
#plot
ggplot(total, aes(x = x.x, y = x.y))  + geom_point(color="grey")+
stat_smooth(method = "loess",color="red",formula=y~x, se = FALSE, span = 0.3,
method.args = list(degree = 2) )+ scale_x_continuous(name="Dist",limits = c(0,5.0e+05),breaks =seq(0, 5.0e+05,50000),expand = c(0, 0)) +
scale_y_continuous(name="Rsq",limits = c(0,0.8),breaks = seq(0.0,0.8,0.1),expand = c(0, 0)) +theme(
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.5, linetype = 'solid',
colour = "lightblue"),
panel.grid.minor = element_blank(),axis.line = element_line(size = 0.5, linetype = "solid",
colour = "black")
)
setwd("~/GitHub/PBAT")
install.packages("metan")
devtools::document()
remove.packages("metan")
install.packages("metan")
devtools::document()
devtools::document()
