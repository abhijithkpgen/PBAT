setwd("~/")
install.packages("agricolae")
install.packages("agricolae")
install.packages("biplotbootGUI")
install.packages("lavaan")
install.packages("plantbreeding",repos="http://r-forge.r-project.org")
install.packages("reshape")
install.packages("plantbreeding",repos="http://r-forge.r-project.org")
library(plantbreeding)
checks1 = c("PRR78", "P6B", "PB1509", "PRH10")
newtrt1=C([1:200])
newtrt1=C[1:100]
newtrt1=C(1:100)
newtrt1=C("1:100")
newtrt1= 1:100
r1 = 4
block.size1 = c(29,29,29,29)
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50)
LI
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 124)
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50)
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50))
newtrt1="BTC1:BTC100"
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50))
checks1 = c("Rampur", "Elice", "Lansing", "Glover")
newtrt1 = c("SD101", "SD102", "SD302", "MN102", "MI6789", "KS2034","SD134",
"SD402", "SD4342", "MN232", "MI69", "KS234",
"SD451", "SD892", "SD212", "MN344", "MI649", "KS336","SD345",
"SD425", "SD5662", "MN892", "MI902", "KS4",
"SD333", "SD1212", "SD021", "MN223L", "MI69n", "KS2123","SD145", "SDJ1",
"SD4234", "MN90", "MI4567", "KS956","SD9901", "SD6602", "SD2202", "MN4402",
"MI892", "KS2421","SD400", "SD4029", "SD987", "MN2333", "MI690", "KS214")
r1 = 4
block.size1 = c(16, 16, 16, 16)
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,
block.size = block.size1, r = r1,  seed = 124))
newtrt1="BTC1:BTC100"
newtrt1
View(newtrt1)
newtrt1=range("BTC1:100")
newtrt1=range("BTC1,100")
newtrt1=range(1,100)
newtrt1=range(1:100)
newtrt1=range{1,100]
newtrt1=range[1,100]
newtrt1=range[1:100]
newtrt1=[1:100]
newtrt1=(1:100)
newtrt1=(BTC1:100)
newtrt1=("BTC"1:100)
newtrt1=(BTC1:BTC100)
newtrt1=("BTC1:BTC100")
newtrt1= range("BTC1:BTC100")
newtrt1= ("BTC",1:100)
newtrt1= setNames("BTC",1:100)
newtrt1= paste0("BTC",1:100)
newtrt1= paste("BTC",1:100)
newtrt1= seq("BTC",1:100)
newtrt1= paste("BTC",1:100,collapse = NULL)
newtrt1= seq("BTC",1:100)
newtrt1= paste("BTC",1:100)
checks1 = c("PRR78", "P6B", "PB1509", "PRH10")
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50))
block.size1 = c(29,29,29,29)
print(EX2 <- auugmentdesign (checks = checks1, newtrt = newtrt1,  block.size = block.size1, r = r1,  seed = 50))
ntrt = paste ("EL", 1:60, sep= "")
checks = c("A", "B", "C", "D", "E", "F")
bsize = c(20, 12, 16, 16, 10, 22)
ado <- adesign (checks = checks, newtrt = ntrt, block.size = bsize, r = 6,  seed = 3246)
print(ado)
ado <- adesign (checks = checks, newtrt = ntrt, block.size = bsize, r = 6)
print(ado)
ado <- adesign (checks = checks, newtrt = ntrt, block.size = bsize, r = 6,  seed = 0)
print(ado)
install.packages("agridat")
install.packages("strataG")
devtools::install_github('ericarcher/strataG', build_vignettes = TRUE)
install.packages("ParallelStructure", repos="http://R-Forge.R-project.org")
install.packages("ParallelStructure", repos="http://R-Forge.R-project.org")
setwd("~/")
install.packages("ParallelStructure", repos="http://R-Forge.R-project.org")
install.packages("Rmpi")
library(Rmpi)
install.packages("C:/Users/abhij/Downloads/Rmpi_0.6-9.2.tar.gz", repos = NULL, type = "source")
library(Rmpi)
install.packages(msmpi)
install.packages("C:/Users/abhij/Downloads/Rmpi_0.6-9.2.tar.gz", repos = NULL, type = "source")
library(Rmpi)
install.packages("GAPIT3_3.1.0.9000.tar.gz", repos = NULL, type="source")
library(devtools)
devtools::install_github("AparicioJohan/MrBeanApp")
remotes::install_github("AparicioJohan/MrBeanApp")
library(devtools)
devtools::install_github("AparicioJohan/MrBeanApp")
library(MrBean)
run_app()
library(devtools)
library(BiocManager)
BiocManager::install(c("AnnotationDbi", "GO.db", "preprocessCore", "impute", "Pigengene", "GENIE3"))
install.packages("kohonen")
install.packages("kohonen")
BiocManager::install(version = "3.20")
# Examples of R Exression
# Add
2+2
install.packages("BiocManager")
BiocManager::install(version = "3.20")
## # Now Install R Package
BiocManager::install("GWASTools")
library(dplyr)
install.packages("lifecycle")
install.packages(c("abind", "AGHmatrix", "agricolae", "AlgDesign", "ape", "arm", "arules", "askpass", "ASMap", "asremlPlus", "ASRgenomics", "backports", "BEDMatrix", "bench", "BGLR", "BH", "bigmemory", "bigmemory.sri", "bit", "bit64", "bitops", "brew", "brio", "broom", "broom.mixed", "bs4Dash", "bslib", "cachem", "callr", "car", "caTools", "checkmate", "classInt", "cli", "clustertend", "CMplot", "coda", "coin", "colorspace", "commonmark", "config", "corrplot", "countrycode", "covr", "cowplot", "cpp11", "crayon", "credentials", "crosstalk", "Cubist", "curl", "dae", "data.table", "DBI", "dbplyr", "deldir", "dendextend", "desc", "digest", "dotCall64", "dplyr", "DT", "e1071", "echarts4r", "ellipse", "emmeans", "estimability", "evaluate", "FactoMineR", "fansi", "farver", "fastcluster", "fastmap", "fastmatch", "fdrtool", "fields", "fontawesome", "fresh", "fs", "future", "gargle", "gaston", "gdata", "gdtools", "gert", "GGally", "ggdendro", "ggforce", "ggfortify", "ggplot2", "ggraph", "ggrepel", "ggsci", "gh", "glmnet", "globals", "glue", "golem", "googledrive", "googlesheets4", "gplots", "graphlayouts", "gtable", "gtools", "GWASExactHW", "haven", "highr", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "interp", "jsonlite", "kableExtra", "klaR", "knitr", "kutils", "labeling", "labelled", "later", "lavaan", "leaps", "libcoin", "lisrelToR", "listenv", "lme4", "logistf", "lpSolve", "lubridate", "magick", "maps", "MatrixModels", "matrixStats", "mice", "microbenchmark", "minqa", "munsell", "mvtnorm", "nloptr", "officer", "OpenMx", "openssl", "openxlsx", "ordinal", "pan", "parallelly", "partykit", "patchwork", "pbapply", "pcaPP", "pegas", "phangorn", "philentropy", "pinfsc50", "pixmap", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "poorman", "poppr", "prettyunits", "processx", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "QBMS", "qgraph", "qtl", "quantreg", "R.oo", "R.utils", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "Rdpack", "readr", "readxl", "rematch", "remotes", "reprex", "rgl", "rintrojs", "rlang", "rmarkdown", "Rmpi", "rMVP", "RMySQL", "RNetCDF", "robustbase", "roxygen2", "rpf", "RPostgreSQL", "rprojroot", "RSQLite", "rstudioapi", "RUnit", "rvest", "rvg", "sampling", "sandwich", "sass", "scales", "scattermore", "scatterplot3d", "segmented", "sem", "seqinr", "shadowtext", "shiny", "shinyalert", "shinycssloaders", "shinytoastr", "shinyWidgets", "snowfall", "sp", "spam", "SparseM", "SpATS", "StanHeaders", "stringi", "stringr", "styler", "svglite", "sys", "systemfonts", "terra", "testthat", "textshaping", "tidygraph", "tidyr", "tidyselect", "timechange", "tinytex", "tweenr", "twosamples", "tzdb", "ucminf", "usethis", "utf8", "uuid", "vcfR", "vctrs", "vegan", "viridis", "viridisLite", "vroom", "waldo", "webshot", "WGCNA", "withr", "writexl", "xfun", "XML", "xml2", "xopen", "xts", "yaml", "zip"))
install.packages("C:/Users/abhij/Downloads/TrainSel-main (2).zip", repos = NULL, type = "win.binary")
library(devtools)
install_github("TheRocinante-lab/TrainSel")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (2).zip", repos = NULL, type = "win.binary")
install.packages(""C:\Users\abhij\Downloads\TrainSel-main (2).zip"", repos = NULL, type = "source")
install.packages(C:\Users\abhij\Downloads\TrainSel-main (2).zip"", repos = NULL, type = "source")
install.packages("C:\Users\abhij\Downloads\TrainSel-main (2).zip"", repos = NULL, type = "source")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
rtoola
rtools
install.packages("C:/Users/abhij/Downloads/RcppArmadillo_0.12.8.4.0.tar.gz", repos = NULL, type = "source")
install.packages("RcppArmadillo")
library(RcppArmadillo)
install.packages("C:/Users/abhij/Downloads/TrainSel-main (2).zip", repos = NULL, type = "win.binary")
install_github("TheRocinante-lab/TrainSel")
install_github("TheRocinante-lab/TrainSel")
library(devtools)
install_github("TheRocinante-lab/TrainSel")
library(RcppArmadillo)
library(devtools)
install_github("TheRocinante-lab/TrainSel")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (2).zip", repos = NULL, type = "win.binary")
#Install packages required for TrainSel if they are
#not already installed:
list.of.packages <- c("doParallel",
"RcppArmadillo",
"RcppEigen",
"foreach",
"RcppProgress",
"devtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#Install TrainSel itself:
library(devtools)
install_github("TheRocinante-lab/TrainSel")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (2).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4).zip", repos = NULL, type = "win.binary")
file.exists("file.exists("C:/Users/YourUsername/Downloads/TrainSel-main/DESCRIPTION")/DESCRIPTION")
file.exists("C:/Users/abhij/Downloads/TrainSel-main/DESCRIPTION")
C:/Users/abhij/Downloads/TrainSel-main/
install.packages("C:/Users/abhij/Downloads/TrainSel-main", repos = NULL, type = "source")
list.files("C:/Users/abhij/Downloads/TrainSel-main")
file.exists("C:/Users/abhij/Downloads/TrainSel-main/DESCRIPTION")
file.exists("C:/Users/abhij/Downloads/TrainSel-main (4)/TrainSel-main/DESCRIPTION")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4)/TrainSel-main", repos = NULL, type = "source")
Sys.which("make")
Sys.which("make")
system("gcc --version")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4)/TrainSel-main", repos = NULL, type = "source")
Sys.setenv(MAKE = "")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4)/TrainSel-main", repos = NULL, type = "source")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4).zip", repos = NULL, type = "win.binary")
library(RcppArmadillo)
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
install.packages("factoextra")
install.packages("FactoMineR")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
library(devtools)
install_github("TheRocinante-lab/TrainSel")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main (4).zip", repos = NULL, type = "win.binary")
#Install TrainSel itself:
library(devtools)
install_github("TheRocinante-lab/TrainSel")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/abhij/Downloads/TrainSel-main.zip", repos = NULL, type = "win.binary")
list.files("C:/Users/abhij/Downloads/TrainSel-main")
install.packages("C:/Users/abhij/Downloads/TrainSel-main", repos = NULL, type = "source")
library(TrainSel)
install.packages("RInno")
RInno::install_inno()
RInno::install_inno()
RInno::install_inno()
RInno::create_app(
app_name = "PbEd",
app_dir = "C:/Users/abhij/OneDrive/Desktop/PbEd"
)
RInno::create_app(
app_name = "PbEd",
app_dir = "C:/Users/abhij/OneDrive/Desktop/PbEd",
user_browser = "chrome"  # or "firefox" or "ie"
)
RInno::create_app(
app_name = "PbEd",
app_dir = "C:/Users/abhij/OneDrive/Desktop/PbEd",
user_browser = "chrome"  # or "firefox" or "ie"
)
if (!requireNamespace("MetaboAnalystR", quietly = TRUE)) {
install.packages("MetaboAnalystR")
}
library(MetaboAnalystR)
library(devtools)
# Step 2: Install MetaboAnalystR without documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = FALSE)
install.packages("https://www.dropbox.com/s/pp9vziji96k5z5k/MetaboAnalystR_3.2.0.tar.gz", repos = NULL, method = "wget")
git clone https://github.com/xia-lab/MetaboAnalystR.git
install.packages("C:/Users/abhij/Downloads/MetaboAnalystR-master.zip", repos = NULL, type = "win.binary")
library(devtools)
install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE)
library(devtools)
install_local("C:/Users/abhij/Downloads/MetaboAnalystR-master/MetaboAnalystR-master")
install.packages("semPlot")
library(semPlot)
install.packages("C:/Users/abhij/Downloads/OpenMx_2.21.13.tar.gz", repos = NULL, type = "source")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
Sys.which("pdflatex")
tinytex::is_tinytex()
tinytex::tinytex_root()
tinytex::tlmgr_path()
Sys.which("pdflatex")
tinytex::tlmgr_update()
bin <- file.path(tinytex::tinytex_root(), "bin", "windows")
Sys.setenv(PATH = paste(bin, Sys.getenv("PATH"), sep=";"))
Sys.which("pdflatex")   # should now show the full path
tinytex::tlmgr_path()   # this updates your *user* PATH on Windows
# Use install_github to get RInno
install_github("ficonsulting/RInno")
library(remotes)
# Use install_github to get RInno
install_github("ficonsulting/RInno")
# Require Package
require(RInno)
# Use RInno to get Inno Setup
install_inno()
setwd("E:/PbAT")
devtools::document()
devtools::check()
