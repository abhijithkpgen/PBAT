setwd("E:/PbATv1")
getwd()               # should show C:/projects/PbAT
devtools::document()
devtools::check()
setwd("E:/PBAT")
unlink(dir(tempdir(), full.names = TRUE, recursive = TRUE), recursive = TRUE, force = TRUE)
devtools::clean_dll()
usethis::proj_set("E:/PBAT")  # make sure usethis and getwd() agree
devtools::check(args = c("--no-manual"), build_args = "--no-resave-data")
unlink(".Rproj.user", recursive = TRUE, force = TRUE) # Remove old project metadata
unlink(dir(tempdir(), full.names = TRUE, recursive = TRUE), recursive = TRUE, force = TRUE)
devtools::clean_dll()
setwd("E:/PBAT")
usethis::proj_set("E:/PBAT")
devtools::document()
devtools::check(args = c("--no-manual"), build_args = "--no-resave-data")
getwd()
grep("setwd\\(", list.files(".", pattern = "\\.(R|r|Rprofile)$", recursive = TRUE, full.names = TRUE), value = TRUE)
fs::dir_exists(tempdir())
fs::file_access(tempdir(), "write")
devtools::check(path = "E:/PBAT", args = c("--no-manual"), build_args = "--no-resave-data")
library(devtools)
getwd()          # should be "E:/PBAT"
ls()                     # should not show 'binary'
if (exists("binary", inherits = TRUE)) rm(binary, envir = .GlobalEnv)
# Fresh session already, but just in case:
rm(list = ls()); gc()
# Make sure tools are current
install.packages(c("pkgbuild","devtools","withr","rlang"))
library(pkgbuild)
# Run build directly (not via devtools) and capture the call stack
pkgbuild::build(".", binary = FALSE)
# 1) create a local build folder
dest <- file.path(getwd(), ".tmp_build")
dir.create(dest, showWarnings = FALSE, recursive = TRUE)
# 2) set TMP/TEMP to that folder for the duration of the build
withr::with_envvar(c(TMPDIR = dest, TEMP = dest, TMP = dest), {
# 3) build to the same folder; no binary build
pkgbuild::build(".", dest_path = dest, binary = FALSE)
})
